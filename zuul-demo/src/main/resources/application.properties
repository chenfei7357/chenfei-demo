server.port = 8889
eureka.client.serviceUrl.defaultZone = http://localhost:8761/eureka/
eureka.instance.appname = ${spring.application.name}
eureka.instance.instance-id = ${spring.application.name}_${server.port}


#zuul.routes.my_api.path=/my_api/**
#zuul.routes.my_api.service-id=kafka-demo

zuul.prefix=/api
zuul.host.connect-timeout-millis=61000
zuul.host.socket-timeout-millis=61000

ribbon.ReadTimeout=61000
ribbon.SocketTimeout=61000

spring.cloud.circuitbreaker.hystrix.enabled=false

#最大连接数
server.tomcat.max-connections=20000
#最大并发
server.tomcat.max-threads=1500
#初始化时创建的线程数
server.tomcat.min-spare-threads=50
#可以放到处理队列中的请求数
server.tomcat.accept-count=1000
server.tomcat.connection-timeout=3000ms


################################################
#                                              #
#   以下为Apollo客户端的配置                      #
#                                              #
################################################
# Apollo 应用ID： 项目编码--应用编码
app.id=zuul-demo
#apollo 地址
apollo.meta=http://10.0.66.244:8080
# 缓存地址
apollo.cacheDir=/opt/data/apollo-cache
# 是否启用配置中心
apollo.bootstrap.enabled=true
# 配置文件名称，properties格式的配置文件只需要名称，不需要后缀名*.properties
apollo.bootstrap.namespaces=application,gateway-flowRule
# 使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好
apollo.bootstrap.eagerLoad.enabled=true



#动态数据源
spring.cloud.sentinel.datasource.ds.apollo.namespace-name =gateway-flowRule
spring.cloud.sentinel.datasource.ds.apollo.flow-rules-key =${app.id}-gateway-flow-rules
spring.cloud.sentinel.datasource.ds.apollo.default-flow-rule-value =[]
spring.cloud.sentinel.datasource.ds.apollo.rule-type=GW_FLOW


spring.cloud.sentinel.datasource.ds1.apollo.namespace-name =gateway-flowRule
spring.cloud.sentinel.datasource.ds1.apollo.flow-rules-key =${app.id}-gateway-api-rules
spring.cloud.sentinel.datasource.ds1.apollo.default-flow-rule-value =[]
spring.cloud.sentinel.datasource.ds1.apollo.rule-type=GW_API_GROUP

#project name 对应控制台的appName
spring.application.name=zuul-demo
#Sentinel自动化配置是否生效 默认true
spring.cloud.sentinel.enabled=true
#是否提前触发 Sentinel 初始化
spring.cloud.sentinel.eager=false
#应用与Sentinel控制台的心跳间隔时间
spring.cloud.sentinel.transport.heartbeat-interval-ms=5
#Spring Cloud Gateway 流控处理逻辑 (选择 redirect or response)
spring.cloud.sentinel.scg.fallback.mode=responseSentinelConfig
#应用与Sentinel控制台交互的端口，应用本地会起一个该端口占用的HttpServer 默认8719
spring.cloud.sentinel.transport.port=8719
#Sentinel 控制台地址
spring.cloud.sentinel.transport.dashboard=10.0.66.244:10000
#Enable to instance CommonFilter
spring.cloud.sentinel.filter.enabled=false